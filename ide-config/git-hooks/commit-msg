#!/usr/bin/env bash

# Create a regex for a conventional commit.
convetional_commit_regex="^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([a-z \-]+\))?!?: .+$"

# Get the commit message (the parameter we're given is just the path to the
# temporary file which holds the message).
commit_message=$(cat "$1")

# Check the message, if we match, all good baby.
if [[ "$commit_message" =~ $convetional_commit_regex ]]; then
   echo -e "\e[32mCommit message meets Conventional Commit standards...\e[0m"
   exit 0
fi

# Uh-oh, this is not a conventional commit, show an example and link to the spec.
#echo -e "\e[31mThe commit message does not meet the Conventional Commit standard\e[0m"
echo -e "\e[31mEl mensaje de commit no sigue el estandar del Conventional Commit\e[0m"
echo ""
echo "Debe tener el siguiente formato: <tipo>(<ambito>): <resumen>"
echo "<ambito> es opcional"
echo ""
echo "Ejemplos de formato válido serían: "
echo "  feat(login): add the 'remember me' button"
echo ""
echo "O bien: "
echo "feat: add hat wobble"
echo "^--^  ^------------^"
echo "|     |"
echo "|     +-> Resumen en presente."
echo "|"
echo "+-------> Tipo: chore, docs, feat, fix, refactor, style, or test."
echo "Ejemplos y explicación de tipos:"
echo ""
echo "feat: (nueva característica para el usuario, no para scripts)"
echo "fix: (correción de error para el usuario, no para corregir un script)"
echo "docs: (cambios a la documentación)"
echo "style: (formateo, punto y comas olvidados, etc; sin cambios en producción)"
echo "refactor: (refactoriazación de código de producción, ej. renombrado de variable)"
echo "test: (añadir testos olvidados, refactorizar test; sin cambios en el código de producción)"
echo "chore: (actualización de tareas de grunt, etc; sin cambios en el código de producción)"
echo ""
echo "More details at: https://www.conventionalcommits.org/en/v1.0.0/#summary"
exit 1